
@{
  ViewBag.Title = "Your Life Interview";
}


<div class="row interviewerheader" style="display:none;background:transparent url('@Url.Content("~/images/Background_Header.png")') no-repeat 0% 0% / 100% auto;">
  <div class="col-md-3">
    <div class="centeredcontent">
      <img src="@Url.Content("~/Images/TurnOnCamera.png")">
    </div>
  </div>
  @*<div class="col-md-2">
      <div class="vertcontent">
        <span>Turn On Camera</span>
      </div>
    </div>*@
  <div class="col-md-3">
    <div class="centeredcontent">
      <img src="@Url.Content("~/Images/ConnectCamera.png")">
    </div>
  </div>
  @*<div class="col-md-2">
      <div class="vertcontent" style="margin-left: -2%">
        <span>Connect</span>
      </div>
    </div>*@
  <div class="col-md-6"></div>
</div>
<div class="interviewerbody">
  <div class="row interviewerrow" style="margin-top:40px">
    <div class="col-md-12">
      <span style="color: #363636; letter-spacing: .6px; font-size: 24px">Interviewer</span>
    </div>
  </div>

  <div class="row interviewerrow">
    <div class="col-md-12">
      <hr align="left" class="simpledivider" />
    </div>
  </div>

  <div class="row interviewerrow" style="margin-top:25px">
    <div class="col-md-4 col-sm-12 col-xs-12">
      <span style="color: #ffa800; letter-spacing: .45px; font-size: 18px">Questions</span>
      <img src=@Url.Content("~/Images/LargeIndicator.gif") id="topicLoadingImage" />
      <div id="accordionoverflow">
        <div class="accordion" id="questionAccordion">

        </div>
      </div>
    </div>
    <div class="col-md-6 col-sm-12 col-xs-12">
      <div><span style="color: #ffa800; letter-spacing: .45px; font-size: 18px">Review</span></div>
      <div style="margin-top: 15px">
        <span id="questionShown"></span>
      </div>
      <div class="player">
        <video id="videoRecorder" playsinline autoplay muted style="width:560px; height:315px"></video>
        <video id="videoReviewer" style="display: none; width:560px; height:315px" playsinline onended="RevertRecorder()"></video>
      </div>
      <div class="player" id="divRecorder" style="display:none">

      </div>

      <div id="recorderButtonContainer">
        <div id="recordingIcon" class="recorder_off" style="width: 20px">
        </div>
        <div id="recordButton" class="enabledRecordButton">
          <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-left: 20%; width: 80%">Answer/</div>
          <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-left: 22%; width: 78%">Record</div>
        </div>
        <div id="stopButton" class="enabledStopButton">
          <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-top: calc(.5rem); margin-left: 30%; width: 70%">Stop</div>
        </div>
        <div id="reviewButton" class="enabledReviewButton">
          <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-top: calc(.5rem); margin-left: 25%; width: 75%">Review</div>
        </div>
        <div id="redoButton" class="enabledRedoButton">
          <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-left: 30%; width: 70%">Redo/</div>
          <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-left: 25%; width: 75%">Record</div>
        </div>
        <div id="postButton" class="enabledPostButton">
          <div id="postButtonStyle" style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 13px; margin-top: calc(.5rem); margin-left: 30%; width: 70%"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" id="loadingPost" style="margin-right: 4px"></span>Post</div>
        </div>
      </div>
      <div id="relatedPhotosHeaderContainer">
        <div id="reloadedPhotosHeaderLabel">
          Related Photos
        </div>
        <div id="uploadPhotoButton" class="uploader" style="float: left; margin-left: 30px; width:100px; cursor:pointer">
          <label>
            <img src="@Url.Content("~/Images/uploadbutton.png")">
            <input id="photoFileInput" type="file" style="visibility: hidden;" multiple="multiple" accept="image/*" />
          </label>
        </div>
        <div id="loadingPhoto" style="float: left; margin-left: 10px;margin-top: 6px"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></div>
      </div>
      <div id="relatedPhotosContainer" class="scrolling-wrapper-flexbox">

      </div>

      <div id="relatedVideosHeaderContainer">
        <div id="reloadedVideosHeaderLabel">
          Related Videos
        </div>
        <div id="uploadVideoButton" class="uploader" style="float: left; margin-left: 30px; cursor:pointer">
          <img src="@Url.Content("~/Images/uploadbutton.png")">
        </div>
      </div>
      <div id="relatedVideosContainer">
        <img src="@Url.Content("~/Images/samplevideo1.png")">
        <img src="@Url.Content("~/Images/samplevideo2.png")">
        <img src="@Url.Content("~/Images/samplevideo3.png")">
      </div>

    </div>
    <div class="col-md-2 col-sm-12 col-xs-12">
      <div class="interviewContainer">
        <div><span style="color: #ffa800; letter-spacing: .45px; font-size: 18px">Interview</span></div>
        <div class="interviewerTopic">
          <span style="font-size: 16px; font-weight:700" id="topicName"></span>
        </div>
        <div id="interviewRecordingsContainer">

        </div>
      </div>
    </div>
  </div>

</div>

<div class="modal fade" id="photoModal" tabindex="-1" role="dialog" aria-labelledby="photoModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">

      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Your Uploaded Photos</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">X</span></button>

      </div>

      <div id="photoModalBody" class="modal-body">

        <div id="photoCarousel" class="carousel slide" data-ride="carousel">


        </div>

      </div>
      <div class="modal-footer">
        <div id="photoButtonContainer">
          <div id="recordPhotoButton" class="enabledRecordButton">
            <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 1em; margin-top: calc(.5rem); margin-left: 21%; width: 75%">Record</div>
          </div>
          <div id="stopPhotoButton" class="enabledStopButton">
            <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 1em; margin-top: calc(.5rem); margin-left: 30%; width: 70%">Stop</div>
          </div>
          <div id="deletePhotoButton" class="enabledRedoButton">
            <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 1em; margin-top: calc(.5rem); margin-left: 25%; width: 75%">Delete</div>
          </div>
          <div id="closePhotoButton" class="enabledPostButton">
            <div style="height: 16px; color: rgb(255, 255, 255); letter-spacing: 0.66px; font-size: 1em; margin-top: calc(.5rem); margin-left: 30%; width: 70%">Close</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="videoModal" tabindex="-1" role="dialog" aria-labelledby="videoModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content modal-video">
      <div class="modal-header">
        <h5 class="modal-title modalTitleVideo" id="videoModalLabel"></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div id="videoModalBody" class="modal-body">

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" id="btnDeleteVideo">Delete</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<audio src="@Url.Content("~/Questions/E01.mp3")" id="questionAudio" type="audio/mp3" onended="AudioComplete()">
  <p>
    Your browser does not support the <code>audio</code> element.
  </p>
</audio>


<input type="hidden" id="defaultCountdownPath" value="https://tellyt.blob.core.windows.net/videos/3SecondCountdown3.mp4" />
<input type="hidden" id="defaultQuestionPath" value="@Url.Content("~/Questions/default.mp3")" />
<input type="hidden" id="defaultPlayQuestion" value="@Url.Content("~/Images/sm_play_icon.png")" />
<input type="hidden" id="defaultPauseQuestion" value="@Url.Content("~/Images/sm_pause_icon.png")" />

@section Scripts
{
  <script src="https://vjs.zencdn.net/7.11.4/video.min.js"></script>
  <script>

    var $videos;
    var $topics;
    var $relatedPhotos;
    var $currentQuestionId = 0;
    var $currentTopicId = 0;
    var isFlashReady = false;
    var isCamReady = false;
    var userHasCam = false;
    var reviewButtonEnabled = false;
    var responseButtonEnabled = false;
    var stopButtonEnabled = false;
    var currentStream = "";
    var currentLocation = "";
    var currentVideo = "";
    var enableReviewButtons = true;

    function RevertPlayer() {
      $("#videoRecorder").hide();
      $("#videoReviewer").show();
    }

    function RevertRecorder() {
      $("#videoRecorder").show();
      $("#videoReviewer").hide();
      if (enableReviewButtons) {
        EnableReviewButtons();
      }
    }

    var pipeParams = { size: { width: 560, height: 315 }, qualityurl: "avq/480p.xml", accountHash: "3a607b4a17256a0676680aca650548be", eid: "A9hIFB", mrt: 3600, asv: 0, showMenu: 0 };

    function onCamAccess(allowed, recorderId) {
      if (allowed) {
        isCamReady = true;
      } else {
        isCamReady = false;
      }
    }

    function pauseAllVideos() {
      $(".vjs-default-skin").trigger('pause');
    }

    function userHasCamMic(cam_number, mic_number, recorderId) {
      userHasCam = ((cam_number > 0) && (mic_number > 0));
    }

    function LoadVideo(element) {
      $("#videoModalBody").html("");

      var posterImage = "https://";
      posterImage += $(element).attr("location");
      posterImage += "/";
      posterImage += $(element).attr("hash");
      posterImage += "/";
      posterImage += $(element).attr("stream");
      posterImage += ".png";
      var videoSource = "https://sqps.onstreamsecure.com/origin/lmskew/tellytdev/";
      videoSource += $(element).attr("stream");
      videoSource += ($(element).attr("type") == "WEBM") ? ".webm" : ".mp4";

      var videoType = ($(element).attr("type") == "WEBM") ? "video/webm" : "video/mp4";

      var videoPlaybackHtml = "<video id=\"vid" + $(element).attr("stream") + "\" class=\"vjs-default-skin vjs-16-9 vjs-big-play-centered\" controls preload=\"auto\" width=\"720\" height=\"405\" ";
      videoPlaybackHtml += "poster=\"" + posterImage + "\" data-setup=\"{}\">";
      videoPlaybackHtml += "<source src=\"" + videoSource + "\" type=\"" + videoType + "\" />";
      videoPlaybackHtml += "<p class=\"vjs-no-js\">To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video</p>";
      videoPlaybackHtml += "</video>";

      $("#videoModalLabel").html($(element).attr("question"));

      currentStream = $(element).attr("stream");

      var videoPlaybackElement = $(videoPlaybackHtml);
      $("#videoModalBody").append(videoPlaybackElement);
      $('#videoModal').modal('show');

      $("#videoModal").on('hide.bs.modal', function () {
        pauseAllVideos();
      });

      //$('#videoModal').on('hide.bs.modal', function (e) {
      //
      //})
    }

    @*function onSaveOk(streamName, streamDuration, userId, cameraName, micName, recorderId, audioCodec, videoCodec, fileType, videoId, audioOnly, location)
    {
      var args = Array.prototype.slice.call(arguments);
      currentLocation = args[11];
      currentStream = args[0];
      currentVideo = args[9];

      var postUrl = "@Url.Content("~/Interview/SaveVideo")";
      $.post(postUrl, { location: currentLocation, hash: "@ViewBag.AccountHash", stream: currentStream, video: currentVideo, questionId: $currentQuestionId, duration:args[1] }, function(data) {
        var returnData = data;
        if (returnData == "success") {
                  //do something
        } else {
                  //display the error
          alert("Error: " + returnData);
        }
                //Refresh the accordion to show the answered question
        RefreshAccordion();
                //RefreshPlaybackVideos();
      });


    }*@

    function DisableAllButtons() {
      $("#recordButton").addClass("disabledRecordButton").removeClass("enabledRecordButton");
      $("#stopButton").addClass("disabledStopButton").removeClass("enabledStopButton");
      $("#redoButton").addClass("disabledRedoButton").removeClass("enabledRedoButton");
      $("#postButton").addClass("disabledPostButton").removeClass("enabledPostButton");
      $("#reviewButton").addClass("disabledReviewButton").removeClass("enabledReviewButton");
    }


    function EnableInitialPhotoButtons() {
      $("#recordPhotoButton").addClass("enabledRecordButton").removeClass("disabledRecordButton");
      $("#stopPhotoButton").addClass("disabledStopButton").removeClass("enabledStopButton");
      $("#stopPhotoButton").addClass("enabledRedoButton").removeClass("disabledRedoButton");
      $("#closePhotoButton").addClass("enabledPostButton").removeClass("disabledPostButton");
    }

    function EnableInitialButtons() {
      $("#recordButton").addClass("enabledRecordButton").removeClass("disabledRecordButton");
      $("#stopButton").addClass("disabledStopButton").removeClass("enabledStopButton");
      $("#reviewButton").addClass("disabledReviewButton").removeClass("enabledReviewButton");
      $("#redoButton").addClass("disabledRedoButton").removeClass("enabledRedoButton");
      $("#postButton").addClass("disabledPostButton").removeClass("enabledPostButton");
    }

    function EnableReviewButtons() {
      $("#recordButton").addClass("enabledRecordButton").removeClass("disabledRecordButton");
      $("#stopButton").addClass("disabledStopButton").removeClass("enabledStopButton");
      $("#reviewButton").addClass("enabledReviewButton").removeClass("disabledReviewButton");
      $("#redoButton").addClass("enabledRedoButton").removeClass("disabledRedoButton");
      $("#postButton").addClass("enabledPostButton").removeClass("disabledPostButton");
    }

    function AudioComplete() {
      $("img.imgquestion").attr("src", $("#defaultPlayQuestion").val());
      //Auto record
      $("#recordButton").click();
    }

    function GetQuestionAudioLocationFromId() {
      for (var iTopic = 0; iTopic < $topics.length; iTopic++) {
        for (var iQuestion = 0; iQuestion < $topics[iTopic].TopicQuestions.length; iQuestion++) {
          if ($topics[iTopic].TopicQuestions[iQuestion].QuestionId == $currentQuestionId) {
            return $topics[iTopic].TopicQuestions[iQuestion].QuestionAudioLocation;
          }
        }
      }
      return "";
    }

    function QuestionIsAnswered() {
      for (var iTopic = 0; iTopic < $topics.length; iTopic++) {
        for (var iQuestion = 0; iQuestion < $topics[iTopic].TopicQuestions.length; iQuestion++) {
          if ($topics[iTopic].TopicQuestions[iQuestion].QuestionId == $currentQuestionId) {
            return $topics[iTopic].TopicQuestions[iQuestion].IsAnswered;
          }
        }
      }
      return false;
    }

    function GetQuestionTextFromId() {
      for (var iTopic = 0; iTopic < $topics.length; iTopic++) {
        for (var iQuestion = 0; iQuestion < $topics[iTopic].TopicQuestions.length; iQuestion++) {
          if ($topics[iTopic].TopicQuestions[iQuestion].QuestionId == $currentQuestionId) {
            return $topics[iTopic].TopicQuestions[iQuestion].QuestionText;
          }
        }
      }
      return "";
    }

    function SelectQuestion() {
      //turn off the recording icon
      $("#recordingIcon").addClass("recorder_off").removeClass("recorder_on");

      if ($("#postButton").hasClass("enabledPostButton")) {
        if (confirm("You have an unsaved video recording. Do you want to post it first?")) {
          $("#postButton").click();
          return;
        }
      }
      $("span.question").removeClass("selectedQuestion");
      $("span.recordedTime").removeClass("selectedQuestion");
      $("div.card-item").addClass("unselectedCardItem").removeClass("selectedCardItem");
      var accordionTopicSelector = "question" + $currentQuestionId;
      $("#" + accordionTopicSelector).find("span.question").addClass("selectedQuestion");
      $("#" + accordionTopicSelector).find("span.recordedTime").addClass("selectedQuestion");
      $("#" + accordionTopicSelector).addClass("selectedCardItem").removeClass("unselectedCardItem");
      var questionText = GetQuestionTextFromId();
      var questionFormattedText = "Question <strong>" +
        GetQuestionTextFromId() +
        "</strong>";
      $("#questionShown").html(questionFormattedText);
      $("#questionShown").attr("title", questionText);
      EnableInitialButtons();
      //if (QuestionIsAnswered()) {
      //  EnableButtonsForAnsweredQuestion();
      //} else {
      //  EnableButtonsForUnansweredQuestion();
      //}
    }

    function GetInterviewQuestions(topicId, questionId) {
      var postUrl = "@Url.Content("~/Interview/GetUserVideos")";
      $.post(postUrl, { topicId: topicId, questionId: questionId }, function(data) {
        if (data.length > 0) {
          BuildInterviewSection(jQuery.parseJSON(data));
        }
      });
    }

    function GetRelatedPhotos(topicId, questionId) {
      $("#loadingPhoto").show();
      var postUrl = "@Url.Content("~/Interview/GetUserRelatedPhotos")";
      $.post(postUrl, { topicId: topicId, questionId: questionId }, function (data) {
        $("#uploadPhotoButton").show();
        $("#loadingPhoto").hide();
        if (data.length > 0) {
          $relatedPhotos = jQuery.parseJSON(data);
          BuildRelatedPhotoSection();
          //BuildPhotoCarousel();
        }
        else {
          $("#relatedPhotosContainer").html("");
        }
      });
    }

    function uuidv4() {
      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
      );
    }

    function BuildRelatedPhotoSection()
    {
      var relatedPhotoHtml = "";
      for (var iPhoto = 0; iPhoto < $relatedPhotos.length; iPhoto++) {
        relatedPhotoHtml += "<div class=\"scrollcard\"><img src=\"" + $relatedPhotos[iPhoto].ThumbUrl + "\"></div>";
      }
      $("#relatedPhotosContainer").html(relatedPhotoHtml);
    }

    function BuildInterviewSection(InterviewQuestions)
    {
      var interviewHtml = "";
      for (var iInterview = 0; iInterview < InterviewQuestions.length; iInterview++) {
        var thumbnailUrl = "https://";
            thumbnailUrl += InterviewQuestions[iInterview].Location;
            thumbnailUrl += "/";
            thumbnailUrl += InterviewQuestions[iInterview].AccountHash;
            thumbnailUrl += "/";
        thumbnailUrl += InterviewQuestions[iInterview].Stream;
        thumbnailUrl += ".png";

        interviewHtml += "<div class=\"topicContainer\">";
        interviewHtml += "<div class=\"videoThumbnailHolder\" ";
        interviewHtml += "location=\"";
        interviewHtml += InterviewQuestions[iInterview].Location;
        interviewHtml += "\" ";
        interviewHtml += "hash=\"";
        interviewHtml += InterviewQuestions[iInterview].AccountHash;
        interviewHtml += "\" ";
        interviewHtml += "type=\"";
        interviewHtml += InterviewQuestions[iInterview].Type;
        interviewHtml += "\" ";
        interviewHtml += "stream=\"";
        interviewHtml += InterviewQuestions[iInterview].Stream;
        interviewHtml += "\" ";
        interviewHtml += "question=\"";
        interviewHtml += InterviewQuestions[iInterview].Question;
        interviewHtml += "\" ";
        interviewHtml += "onclick=\"LoadVideo(this)\" ";
        interviewHtml += "title=\"" + InterviewQuestions[iInterview].Question + "\" ";
        interviewHtml += ">";
        interviewHtml += "<img class=\"videothumbnailimage\" src=\"" + thumbnailUrl + "\" style=\"height:99px;width:176px\">";
        interviewHtml += "<div class=\"overlaytext\">";
        interviewHtml += InterviewQuestions[iInterview].RecordedTime;
        interviewHtml += "</div>";
        if (iInterview == 0) {
        interviewHtml += "<div class=\"overlaylatest\">";
          interviewHtml += "Latest";
        interviewHtml += "</div>";
        }
        interviewHtml += "</div>";
        interviewHtml += "<div class=\"videodescriptionholder\">";
        interviewHtml += "<div class=\"topictext\">";
        interviewHtml += InterviewQuestions[iInterview].Question;
        interviewHtml += "</div>";
        interviewHtml += "<div class=\"topictiming\">";
        interviewHtml += InterviewQuestions[iInterview].LastModifiedText;
        interviewHtml += "</div>";
        interviewHtml += "</div>";
        interviewHtml += "</div>";
      }
      $("#interviewRecordingsContainer").html(interviewHtml);
    }

    function BuildAccordion() {
      var allTopics = "";
      var cardHtml =
        "<div class=\"card\" style=\"border:currentColor; border-image: none; background-color: rgb(238, 236, 236);\">";
      for (var iTopic = 0; iTopic < $topics.length; iTopic++) {
        var headingId = "heading" + $topics[iTopic].TopicId;
        var collapseId = "collapse" + $topics[iTopic].TopicId;
        allTopics += cardHtml;
        allTopics += "<div class=\"card-header\" id=\"" +
          headingId +
            "\" style=\"padding: 0px 0.5rem 0.25rem; border-radius: calc(.5rem - 1px); margin-bottom: 5px;\">";
        allTopics += "<h2 class=\"mb-0\">";
        allTopics += "<button class=\"btn collapsed accordionbutton\" type=\"button\" data-toggle=\"collapse\" data-target=\"#" + collapseId + "\" aria-expanded=\"false\" aria-controls=\"" + collapseId + "\" style=\"box-shadow: none\">";
        allTopics += "<div>Section " + iTopic + " <strong>" + $topics[iTopic].TopicName + "</strong></div>";
        allTopics += "<div><strong>" + $topics[iTopic].AnsweredCount + "/" + $topics[iTopic].QuestionCount + "</strong></div>";
        allTopics += "</button>";
        allTopics += "</h2>";
        allTopics += "</div>";

        allTopics += "<div id=\"" + collapseId + "\" class=\"collapse\" topicName=\"" + $topics[iTopic].TopicName + "\" aria-labelledby=\"" + headingId + "\" data-parent=\"#questionAccordion\">";
        allTopics += "<div class=\"card-body\" style=\"padding:0px\">";

        for (var iQuestion = 0; iQuestion < $topics[iTopic].TopicQuestions.length; iQuestion++) {
          var questionId = "question" + $topics[iTopic].TopicQuestions[iQuestion].QuestionId;
          allTopics += "<div class=\"card-item unselectedCardItem\" id=\"" +
            questionId +
            "\" style=\"cursor: pointer; border-radius: calc(.5rem - 1px); width: 100%; padding-right: 10px; padding-left: 10px; display: inline-block; font-size: .9em\">";
          allTopics += "<div class=\"playquestion\" style=\"width: auto\">";
          allTopics += "<img class=\"imgquestion\" src=\"@Url.Content("~/Images/sm_play_icon.png")\" style=\"margin-bottom:3px\">";
          allTopics += "</div>";
          allTopics += "<div style=\"width: 75%; padding-left: 5px\">";
          allTopics += "<span class=\"question\" title=\"" + $topics[iTopic].TopicQuestions[iQuestion].QuestionText + "\">" + $topics[iTopic].TopicQuestions[iQuestion].QuestionText + "</span>";
          allTopics += "</div>";
          allTopics += "<div style=\"width:10%\">";
          allTopics += "<span class=\"recordedTime\" style=\"float:right\">" + $topics[iTopic].TopicQuestions[iQuestion].RecordedTime + "</spran>";
          allTopics += "</div>";
          allTopics += "<div style=\"margin-left: 5px; margin-top: 2px; width:auto\">";
          if ($topics[iTopic].TopicQuestions[iQuestion].IsAnswered) {
            allTopics += "<img src=\"@Url.Content("~/Images/check.png")\" style=\"float:right\">";
          } else {
            allTopics += "<img src=\"@Url.Content("~/Images/checkbox_empty.png")\" style=\"float:right\">";
          }
          allTopics += "</div>";
          allTopics += "</div>";
        }

        allTopics += "</div>";
        allTopics += "</div>";

        allTopics += "</div>";

      }
      $("#questionAccordion").html(allTopics);

      $('.collapse').on('shown.bs.collapse',
        function () {
          $currentTopicId = parseInt($(this)[0].id.replace("collapse", ""));
          $("#topicName").html($(this)[0].attributes["topicName"].nodeValue);
          GetInterviewQuestions($currentTopicId, 0);
          $(this).parent().addClass('active');
          $(this).parent().find("button").addClass('activeaccordionbutton');
        });

      $('.collapse').on('hidden.bs.collapse',
        function() {
          $(this).parent().removeClass('active');defau
          $(this).parent().find("button").removeClass('activeaccordionbutton');
        });

      $(".card-item").click(function ()
      {
        $currentQuestionId = parseInt($(this)[0].id.replace("question", ""));
        //topicName
        GetInterviewQuestions(0, $currentQuestionId);
        SelectQuestion();
      });

      $(".playquestion").click(function ()
      {
        $currentQuestionId = parseInt($(this).parent()[0].id.replace("question", ""));

        if ($(this).find("img.imgquestion").attr("src") == $("#defaultPauseQuestion").val()) {
          //Just pause it
          document.getElementById('questionAudio').pause();
          $(this).find("img.imgquestion").attr("src", $("#defaultPlayQuestion").val());
        }
        else
        {
          var questionAudioLocation = GetQuestionAudioLocationFromId();
        if (questionAudioLocation.length) {
          var newAudioPath = $("#defaultQuestionPath").val().replace("default.mp3", questionAudioLocation);
          $("#questionAudio").attr("src", newAudioPath);
          document.getElementById('questionAudio').volume = 1;
          document.getElementById('questionAudio').play();

          $("img.imgquestion").attr("src", $("#defaultPlayQuestion").val());
          $(this).find("img.imgquestion").attr("src", $("#defaultPauseQuestion").val());

          }
        }
      });
    }

    function RefreshAccordion() {
      var getTopicsUrl = "@Url.Content("~/Interview/GetUserTopicsAndQuestions")";
      $.get(getTopicsUrl,
        { "_": $.now() },
        function(data) {
          $("#topicLoadingImage").hide();
          if (data.length > 0) {
            $topics = jQuery.parseJSON(data);
            BuildAccordion(data);
          }
        });
      }

    function str_pad_left(string, pad, length) {
      return (new Array(length + 1).join(pad) + string).slice(-length);
    }

    $(function () {

      var mediaSource = new MediaSource();
      mediaSource.addEventListener('sourceopen', handleSourceOpen, false);

      var mediaRecorder;
      var recordedBlobs;
      var sourceBuffer;
      var mimeType;
      var recordedVideo = document.querySelector('video#videoReviewer');

      function handleSuccess(stream) {
        console.log('getUserMedia() got stream:', stream);
        window.stream = stream;

        const gumVideo = document.querySelector('video#videoRecorder');
        gumVideo.srcObject = stream;
        isCamReady = true;
      }

      function handleSourceOpen(event) {
        console.log('MediaSource opened');
        sourceBuffer = mediaSource.addSourceBuffer(mimeType);
        console.log('Source buffer: ', sourceBuffer);
      }

      async function init(constraints) {
        try {
          const stream = await navigator.mediaDevices.getUserMedia(constraints);
          handleSuccess(stream);
        } catch (e) {
          console.error('navigator.getUserMedia error:', e);
        }
      }

      (async () => {
        const constraints = {
          audio: {
            echoCancellation: { exact: true }
          },
          video: {
            width: 1280, height: 720
          }
        };
        await wait(1000);
        await init(constraints);
      })()

      async function wait(ms) {
        return new Promise(resolve => {
          setTimeout(resolve, ms);
        });
      }

      function startRecording() {
        recordedBlobs = [];

        const optionsWEBM = {
          audioBitsPerSecond: 128000,
          videoBitsPerSecond: 2500000,
          mimeType: 'video/webm;codecs=vp9'
        }

        const optionsWEBMGeneric = {
          audioBitsPerSecond: 128000,
          videoBitsPerSecond: 2500000,
          mimeType: 'video/webm;codecs=vp9'
        }

        const optionsMP4 = {
          audioBitsPerSecond: 128000,
          videoBitsPerSecond: 2500000,
          mimeType: 'video/mp4'
        }

        let options = optionsWEBM;

        recordedBlobs = [];
        try {
          mediaRecorder = new MediaRecorder(window.stream, options);
        } catch (e0) {
          console.log('Unable to create MediaRecorder with options Object: ', options, e0);
          try {
            options = optionsWEBMGeneric;
            mediaRecorder = new MediaRecorder(window.stream, options);
          } catch (e1) {
            console.log('Unable to create MediaRecorder with options Object: ', options, e1);
            try {
              options = optionsMP4;
              mediaRecorder = new MediaRecorder(window.stream, options);
            } catch (e2) {
              alert('MediaRecorder is not supported by this browser.');
              console.error('Exception while creating MediaRecorder:', e2);
              return;
            }
          }
        }

        console.log('Created MediaRecorder', mediaRecorder, 'with options', options);
        mediaRecorder.onstop = (event) => {
          console.log('Recorder stopped: ', event);
          console.log('Recorded Blobs: ', recordedBlobs);
        };
        mediaRecorder.ondataavailable = handleDataAvailable;
        mediaRecorder.start(10); // collect 10ms of data
        console.log('MediaRecorder started', mediaRecorder);
      }

      function stopRecording() {
        mediaRecorder.stop();
      }

      function handleDataAvailable(event) {
        console.log('handleDataAvailable', event);
        if (event.data && event.data.size > 0) {
          recordedBlobs.push(event.data);
        }
      }

      function recordedBlobsToFile(filename) {
        let fileBuffer = new Blob(recordedBlobs, { type: mimeType });
        fileBuffer.lastModifiedDate = new Date();
        fileBuffer.name = filename;
        return fileBuffer;
      }

      DisableAllButtons();
      RefreshAccordion();
      GetRelatedPhotos();

      document.querySelector('#recordButton').addEventListener('click', async () => {

        if (($("#recordButton").hasClass("enabledRecordButton")) || ($("#redoButton").hasClass("enabledRedoButton"))) {

          if (!isCamReady) {
            const constraints = {
              audio: {
                echoCancellation: { exact: true }
              },
              video: {
                width: 1280, height: 720
              }
            };
            await init(constraints);
            if (!isCamReady) {
              alert(
                "Your recording device is not ready. Please allow access to your camera & microphone if necessary.");
              return;
            }
          }

          if ($currentQuestionId > 0) {
            recordedVideo.src = null;
            recordedVideo.srcObject = null;
            $("#videoReviewer").show();
            $("#videoRecorder").hide();
            recordedVideo.src = $("#defaultCountdownPath").val();
            recordedVideo.play();
            enableReviewButtons = false;
            setTimeout(function () {
              startRecording();
              //turn on the recording icon
              $("#recordingIcon").addClass("recorder_on").removeClass("recorder_off");
              //enable the stop button, disable the record/review/redo/post buttons
              $("#recordButton").addClass("disabledRecordButton").removeClass("enabledRecordButton");
              $("#stopButton").addClass("enabledStopButton").removeClass("disabledStopButton");
              $("#reviewButton").addClass("disabledReviewButton").removeClass("enabledReviewButton");
              $("#redoButton").addClass("disabledRedoButton").removeClass("enabledRedoButton");
              $("#postButton").addClass("disabledPostButton").removeClass("enabledPostButton");
            }, 3000);
          } else {
            alert("Please select a topic and question before recording.");
          }
        }
      });

      document.querySelector('#redoButton').addEventListener('click', async () => {
        $("#recordButton").click();
      });

      document.querySelector('#stopButton').addEventListener('click', async () => {
        enableReviewButtons = true;
        if ($("#stopButton").hasClass("enabledStopButton")) {

          stopRecording();
          //turn off the recording icon
          $("#recordingIcon").addClass("recorder_off").removeClass("recorder_on");
          //disable the stop button, enable the review/redo/post buttons
          $("#stopButton").addClass("disabledStopButton").removeClass("enabledStopButton");
          $("#reviewButton").addClass("enabledReviewButton").removeClass("disabledReviewButton");
          $("#redoButton").addClass("enabledRedoButton").removeClass("disabledRedoButton");
          $("#postButton").addClass("enabledPostButton").removeClass("disabledPostButton");
        }
      });

      document.querySelector('#reviewButton').addEventListener('click', async () => {
        enableReviewButtons = true;
        if ($("#reviewButton").hasClass("enabledReviewButton")) {
          $("#videoReviewer").show();
          $("#videoRecorder").hide();
          const superBuffer = new Blob(recordedBlobs, { type: mimeType });
          recordedVideo.src = null;
          recordedVideo.srcObject = null;
          recordedVideo.src = window.URL.createObjectURL(superBuffer);
          recordedVideo.controls = true;
          recordedVideo.play();
        }
      });



      window.addEventListener('keydown', function(e) {
        if(e.keyCode == 32 && e.target == document.body) {
          e.preventDefault();
        }
      });

      $('body').keyup(function (e) {
        var code;
        if (e.keyCode) {
         code = e.keyCode;
        } else if (e.which) {
         code = e.which;
        }
        if (code == 32) {
          // user has pressed space
          $("#stopButton").click();
        }
        if (code == 82) {
          // user has pressed space
          $("#reviewButton").click();
        }
        if (code == 80) {
          // user has pressed space
          $("#postButton").click();
         }
        });

      $("#postButton").click(function () {
        enableReviewButtons = true;
            if ($(this).hasClass("enabledPostButton")) {

              $("#postButtonStyle").css("margin-left", "20%");
              $("#loadingPost").show();

              var fileName = uuidv4();
              var file = recordedBlobsToFile(fileName);

              //window.console.log("Recorded Blobs length: " + recordedBlobs.length);
              var time = (recordedBlobs.length * 10) / 100;  //1.88
              var minutes = Math.floor(time / 60); //0
              var seconds = Math.round(time - minutes);
              console.log("time: " + time);
              var duration = str_pad_left(minutes, '0', 2) + ':' + str_pad_left(seconds, '0', 2);

              var formData = new FormData();
              let dataValues = {};
              dataValues.questionId = $currentQuestionId;
              dataValues.duration = duration;
              dataValues.fileName = fileName;

              formData.append("formValues", JSON.stringify(dataValues));
              formData.append("uploadFile", file);

              $.ajax({
                xhr: function() {
                  var xhr = new window.XMLHttpRequest();
                  return xhr;
                },
                url: '@Url.Content("~/Interview/SaveWebcamVideo")',
                type: "POST",
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                dataType: "json",
                success: function (result)
                {

                  //$("#loadingPost").hide();
                  //if (result.Successful == true) {

                  //} else {
                  //  alert(result.ErrorMessage);
                  //  successfulUpload = false;
                  //}
                  return;
                },
                error: function (xhr, status, error)
                {
                  //$("#postButtonStyle").css("margin-left", "30%");

                  //console.log(xhr.responseText);
                  //alert(xhr.responseText);
                  //successfulUpload = false;
                  return;
                }
              });

              $("#postButtonStyle").css("margin-left", "30%");
              $("#loadingPost").hide();
              alert("Your video has been posted and will be available soon!");
              RefreshAccordion();

                //enable the answer button, disable the stop/review/redo/post buttons
                $("#recordButton").addClass("enabledRecordButton").removeClass("enabledRecordButton");
                $("#stopButton").addClass("disabledStopButton").removeClass("enabledRecordButton");
                $("#reviewButton").addClass("disabledReviewButton").removeClass("enabledRecordButton");
                $("#redoButton").addClass("disabledRedoButton").removeClass("enabledRecordButton");
                $("#postButton").addClass("disabledPostButton").removeClass("enabledPostButton");
            }
          });

    });

    $(document).ready(function() {

      $("#loadingPost").hide();
      $("#loadingPhoto").hide();
      $("#uploadPhotoButton").hide();
      $("#recordingIcon").addClass("recorder_off").removeClass("recorder_on");;

      //$('#carousel-modal').carousel();
      $('.carousel').carousel({
        interval: false
      })

      document.getElementById('photoFileInput').addEventListener('change', function ()
      {
        var successfulUpload = true;
        if (this.files.length > 10) {
          alert("Please only upload a maximum of 10 files at a time.");
          return;
        }
        for(var i = 0; i<this.files.length; i++){
          var file = this.files[i];
          //upload each file

          var formData = new FormData();
          let dataValues = {};
          dataValues.questionId = $currentQuestionId;
          dataValues.fileName = file.name;

          formData.append("formValues", JSON.stringify(dataValues));
          formData.append("uploadFile", file);
          $.ajax({
            xhr: function() {
              var xhr = new window.XMLHttpRequest();
              return xhr;
            },
            url: '@Url.Content("~/Interview/UploadPhoto")',
            type: "POST",
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            dataType: "json",
            success: function (result)
            {
              if (result.Successful == true) {
                GetRelatedPhotos();
              } else {
                alert(result.ErrorMessage);
                successfulUpload = false;
              }
            },
            error: function (xhr, status, error)
            {
              alert(xhr.responseText);
              successfulUpload = false;
            }
          });
        }
        //Now refresh the list



      }, false);

      $("#btnDeleteVideo").click(function() {
        if (confirm("Are you sure you wish to delete this video?")) {
          $('#videoModal').modal('hide');
          var postUrl = "@Url.Content("~/Interview/DeleteVideo")";
          $.post(postUrl, { stream: currentStream }, function(data) {
            GetInterviewQuestions($currentTopicId, $currentQuestionId);
          });
        }
      });

      $("div.uploader").hover(function() {
          $(this).find("img").attr("src",
            function(index, attr) {
              return attr.replace(".png", "active.png");
            });
        },
        function() {
          $(this).find("img").attr("src",
            function(index, attr) {
              return attr.replace("active.png", ".png");
            });
        });

      $("#recordButton").hover(function ()
      {
        if ($(this).hasClass("enabledRecordButton")) {
          $(this).addClass('highlightRecordButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledRecordButton")) {
          $(this).removeClass('highlightRecordButton');
          }
      });


      $("#recordPhotoButton").hover(function ()
      {
        if ($(this).hasClass("enabledRecordButton")) {
          $(this).addClass('highlightRecordButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledRecordButton")) {
          $(this).removeClass('highlightRecordButton');
          }
      });

      $("#stopButton").hover(function ()
      {
        if ($(this).hasClass("enabledStopButton")) {
          $(this).addClass('highlightStopButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledStopButton")) {
          $(this).removeClass('highlightStopButton');
          }
      });

      $("#stopPhotoButton").hover(function ()
      {
        if ($(this).hasClass("enabledStopButton")) {
          $(this).addClass('highlightStopButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledStopButton")) {
          $(this).removeClass('highlightStopButton');
          }
      });

      $("#reviewButton").hover(function ()
      {
        if ($(this).hasClass("enabledReviewButton")) {
          $(this).addClass('highlightReviewButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledReviewButton")) {
          $(this).removeClass('highlightReviewButton');
          }
      });

      $("#redoButton").hover(function ()
      {
        if ($(this).hasClass("enabledRedoButton")) {
          $(this).addClass('highlightRedoButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledRedoButton")) {
          $(this).removeClass('highlightRedoButton');
          }
      });

      $("#deletePhotoButton").hover(function ()
      {
        if ($(this).hasClass("enabledRedoButton")) {
          $(this).addClass('highlightRedoButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledRedoButton")) {
          $(this).removeClass('highlightRedoButton');
          }
      });

      $("#postButton").hover(function ()
      {
        if ($(this).hasClass("enabledPostButton")) {
          $(this).addClass('highlightPostButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledPostButton")) {
          $(this).removeClass('highlightPostButton');
          }
      });

      $("#closePhotoButton").hover(function ()
      {
        if ($(this).hasClass("enabledPostButton")) {
          $(this).addClass('highlightPostButton');
        }
      }, function ()
      {
        if ($(this).hasClass("enabledPostButton")) {
          $(this).removeClass('highlightPostButton');
          }
      });

      $("#relatedPhotosContainer").click(function ()
      {
        BuildPhotoCarousel();
        $('#photoModal').modal()
        //alert("Open a detailed panel with a carousel showing the photo. Enable text documentation, the ability to delete, and the ability to scroll to the next photo.");
      });

      $("#reloadedVideosHeaderLabel").click(function() {
        alert("Open a panel that plays the video");
      });

      $("#relatedVideosContainer").click(function() {
        alert("Open a detailed panel showing all uploaded videos");
      });


      $("#uploadVideoButton").click(function() {
        alert("Upload a new video");
      });

      $(".topicContainer").click(function() {
        alert("This will select the topic and load the video in the player for the user to answer/review/redo/post");
      });

    });

  </script>
}
